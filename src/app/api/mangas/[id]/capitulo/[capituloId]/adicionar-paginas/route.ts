import { NextRequest, NextResponse } from 'next/server';
import { Pool } from 'pg';
import { writeFile, mkdir } from 'fs/promises';
import path from 'path';
import { verifyToken } from '@/lib/auth';

// Configura√ß√µes para uploads grandes
export const runtime = 'nodejs';
export const maxDuration = 120;

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

// Fun√ß√£o para salvar imagem base64 em arquivo
async function salvarImagem(base64Data: string, nomeArquivo: string, subpasta: string = '') {
  try {
    // Remover o prefixo data:image/...;base64,
    const base64 = base64Data.split(',')[1];
    const buffer = Buffer.from(base64, 'base64');
    
    // Criar diret√≥rio se n√£o existir com permiss√µes adequadas
    const uploadsDir = path.join(process.cwd(), 'uploads', subpasta);
    
    try {
      await mkdir(uploadsDir, { 
        recursive: true,
        mode: 0o755 // Permiss√µes de leitura/escrita/execu√ß√£o para owner e grupo
      });
    } catch (mkdirError) {
      console.warn('Erro ao criar diret√≥rio com permiss√µes 755, tentando 777:', mkdirError);
      // Tentar com permiss√µes mais permissivas
      await mkdir(uploadsDir, { 
        recursive: true,
        mode: 0o777 // Permiss√µes mais permissivas
      });
    }
    
    // Salvar arquivo com permiss√µes adequadas
    const caminhoArquivo = path.join(uploadsDir, nomeArquivo);
    
    try {
      await writeFile(caminhoArquivo, buffer, { mode: 0o644 }); // Permiss√µes de leitura/escrita para owner, leitura para outros
    } catch (writeError) {
      console.warn('Erro ao salvar com permiss√µes 644, tentando 666:', writeError);
      // Tentar com permiss√µes mais permissivas
      await writeFile(caminhoArquivo, buffer, { mode: 0o666 }); // Permiss√µes mais permissivas
    }
    
    // Retornar URL relativa com /uploads/
    const url = `/uploads/${subpasta}${subpasta ? '/' : ''}${nomeArquivo}`;
    return url;
  } catch (error) {
    console.error('Erro ao salvar imagem:', error);
    throw error;
  }
}

// POST - Adicionar p√°ginas a um cap√≠tulo existente
export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ id: string; capituloId: string }> }
) {
  try {
    // Verificar autentica√ß√£o
    const tokenResult = verifyToken(request);
    if (!tokenResult.success) {
      return NextResponse.json({ error: tokenResult.error }, { status: 401 });
    }

    console.log('üîç API - Iniciando adi√ß√£o de p√°ginas ao cap√≠tulo');
    
    const { id, capituloId } = await params;
    const mangaId = parseInt(id);
    const capId = parseInt(capituloId);
    const body = await request.json();
    const { paginas } = body;
    
    console.log('üì• API - Dados recebidos:', {
      mangaId,
      capituloId: capId,
      paginasCount: paginas?.length
    });

    if (isNaN(mangaId) || isNaN(capId)) {
      console.log('‚ùå API - IDs inv√°lidos');
      return NextResponse.json({ error: 'IDs inv√°lidos' }, { status: 400 });
    }

    if (!paginas || paginas.length === 0) {
      console.log('‚ùå API - Nenhuma p√°gina fornecida');
      return NextResponse.json({ 
        error: 'Nenhuma p√°gina fornecida',
        details: { paginas: paginas?.length || 0 }
      }, { status: 400 });
    }

    const client = await pool.connect();
    
    try {
      // Debug log removido por seguran√ßa
      await client.query('BEGIN');

      // Verificar se o mang√° existe
      // Debug log removido por seguran√ßa
      const mangaResult = await client.query(
        `SELECT id FROM mangas WHERE id = $1`,
        [mangaId]
      );

      if (mangaResult.rows.length === 0) {
        console.log('‚ùå API - Mang√° n√£o encontrado');
        await client.query('ROLLBACK');
        return NextResponse.json({ error: 'Mang√° n√£o encontrado' }, { status: 404 });
      }

      // Verificar se o cap√≠tulo existe
      // Debug log removido por seguran√ßa
      const capituloResult = await client.query(
        `SELECT id, numero FROM capitulos WHERE id = $1 AND manga_id = $2`,
        [capId, mangaId]
      );

      if (capituloResult.rows.length === 0) {
        console.log('‚ùå API - Cap√≠tulo n√£o encontrado');
        await client.query('ROLLBACK');
        return NextResponse.json({ error: 'Cap√≠tulo n√£o encontrado' }, { status: 404 });
      }

      // Buscar o pr√≥ximo n√∫mero de p√°gina
      console.log('üîç API - Buscando pr√≥ximo n√∫mero de p√°gina');
      const ultimaPaginaResult = await client.query(
        `SELECT MAX(numero) as max_numero FROM paginas WHERE capitulo_id = $1`,
        [capId]
      );

      const proximoNumero = (ultimaPaginaResult.rows[0].max_numero || 0) + 1;
      console.log('üìÑ API - Pr√≥ximo n√∫mero de p√°gina:', proximoNumero);

      // Gerar timestamp √∫nico para evitar conflitos de nome
      const timestamp = Date.now();
      console.log('‚è∞ API - Timestamp gerado:', timestamp);

      // Salvar novas p√°ginas
      console.log('üìÑ API - Salvando novas p√°ginas:', paginas.length);
      for (let i = 0; i < paginas.length; i++) {
        const pagina = paginas[i];
        const numeroPagina = proximoNumero + i;
        // Debug log removido por seguran√ßa
        
        const extensaoPagina = pagina.preview.includes('data:image/png') ? 'png' : 'jpg';
        const nomePagina = `pagina_${capId}_${numeroPagina}_${timestamp}.${extensaoPagina}`;
        
        // Debug log removido por seguran√ßa
        const urlPagina = await salvarImagem(pagina.preview, nomePagina, `capitulos/${capId}`);
        
        // Debug log removido por seguran√ßa
        await client.query(`
          INSERT INTO paginas (capitulo_id, numero, imagem, legenda)
          VALUES ($1, $2, $3, $4)
        `, [capId, numeroPagina, urlPagina, pagina.legenda || `P√°gina ${numeroPagina}`]);
      }

      console.log('‚úÖ API - Commitando transa√ß√£o');
      await client.query('COMMIT');
      
      console.log('üéâ API - P√°ginas adicionadas com sucesso!');
      return NextResponse.json({ 
        success: true, 
        paginasAdicionadas: paginas.length,
        proximoNumero,
        message: `${paginas.length} p√°gina(s) adicionada(s) com sucesso!` 
      });

    } catch (error) {
      console.error('‚ùå API - Erro na transa√ß√£o:', error);
      await client.query('ROLLBACK');
      throw error;
    } finally {
      client.release();
    }

  } catch (error) {
    console.error('‚ùå API - Erro geral ao adicionar p√°ginas:', error);
    return NextResponse.json({ error: 'Erro interno do servidor' }, { status: 500 });
  }
}
